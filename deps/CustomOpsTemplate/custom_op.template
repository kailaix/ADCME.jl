#include "tensorflow/core/framework/op_kernel.h"
#include "tensorflow/core/framework/tensor_shape.h"
#include "tensorflow/core/platform/default/logging.h"
#include "tensorflow/core/framework/shape_inference.h"
#include<cmath>

// Signatures for GPU kernels here 


using namespace tensorflow;
#include "${OperatorName}.h"


REGISTER_OP("${OperatorName}")
${ForwardInputOutput}
.SetShapeFn([](::tensorflow::shape_inference::InferenceContext* c) {
    ${SetShapeFn}
    return Status::OK();
  });

REGISTER_OP("${OperatorName}Grad")
${BackwardInputOutput}

/*-------------------------------------------------------------------------------------*/

class ${OperatorName}Op : public OpKernel {
private:
  ${AttributesDef}
public:
  explicit ${OperatorName}Op(OpKernelConstruction* context) : OpKernel(context) {
${AttributesParse2}
  }

  void Compute(OpKernelContext* context) override {    
    DCHECK_EQ(${ForwarInputNum}, context->num_inputs());
    
    ${ForwardTensor}
    
    ${ForwardTensorShape}
    
    ${ForwardCheckShape}

    // extra check
        
    // create output shape
    ${ForwardOutputShape}
            
    // create output tensor
    ${ForwardOutput}
    
    // get the corresponding Eigen tensors for data access
    ${ForwardGetData}   

    // implement your forward function here 

    // TODO:

  }
};
REGISTER_KERNEL_BUILDER(Name("${OperatorName}").Device(DEVICE_CPU), ${OperatorName}Op);



class ${OperatorName}GradOp : public OpKernel {
private:
  ${AttributesDef}
public:
  explicit ${OperatorName}GradOp(OpKernelConstruction* context) : OpKernel(context) {
    ${AttributesParse2}
  }
  
  void Compute(OpKernelContext* context) override {
    
    ${BackwardTensor}
    
    ${BackwardTensorShape}
    
    ${BackwardCheckShape}

    // extra check
    // int m = Example.dim_size(0);
        
    // create output shape
    ${BackwardOutputShape}
            
    // create output tensor
    ${BackwardOutput}
    
    // get the corresponding Eigen tensors for data access
    ${BackwardGetData}   

    // implement your backward function here 

    // TODO:
    
  }
};
REGISTER_KERNEL_BUILDER(Name("${OperatorName}Grad").Device(DEVICE_CPU), ${OperatorName}GradOp);


/***************************************************************************************
**********************            GPU Operator            ******************************
***************************************************************************************/


class ${OperatorName}OpGPU : public OpKernel {
private:
  ${AttributesDef}
public:
  explicit ${OperatorName}OpGPU(OpKernelConstruction* context) : OpKernel(context) {
${AttributesParse2}
  }

  void Compute(OpKernelContext* context) override {    
    DCHECK_EQ(${ForwarInputNum}, context->num_inputs());
    
    ${ForwardTensor}
    
    ${ForwardTensorShape}
    
    ${ForwardCheckShape}

    // extra check
        
    // create output shape
    ${ForwardOutputShape}
            
    // create output tensor
    ${ForwardOutput}
    
    // get the corresponding Eigen tensors for data access
    ${ForwardGetData}   

    // implement your forward function here 

    // TODO:

  }
};
REGISTER_KERNEL_BUILDER(Name("${OperatorName}").Device(DEVICE_GPU), ${OperatorName}OpGPU);

class ${OperatorName}GradOpGPU : public OpKernel {
private:
  ${AttributesDef}
public:
  explicit ${OperatorName}GradOpGPU(OpKernelConstruction* context) : OpKernel(context) {
    ${AttributesParse2}
  }
  
  void Compute(OpKernelContext* context) override {
    
    ${BackwardTensor}
    
    ${BackwardTensorShape}
    
    ${BackwardCheckShape}

    // extra check
    // int m = Example.dim_size(0);
        
    // create output shape
    ${BackwardOutputShape}
            
    // create output tensor
    ${BackwardOutput}
    
    // get the corresponding Eigen tensors for data access
    ${BackwardGetData}   

    // implement your backward function here 

    // TODO:
    
  }
};
REGISTER_KERNEL_BUILDER(Name("${OperatorName}Grad").Device(DEVICE_GPU), ${OperatorName}GradOpGPU);
